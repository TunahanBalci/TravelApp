@model IEnumerable<TravelApp.Models.Entities.Preference>

@{
    ViewData["Title"] = "Preferences";

    var userPreferences = ViewBag.UserPreferences as IEnumerable<TravelApp.Models.Entities.Preference> ?? new List<TravelApp.Models.Entities.Preference>();

    var allPreferences = Model ?? new List<TravelApp.Models.Entities.Preference>();
}

<form id="preferenceForm">
    @Html.AntiForgeryToken()

    <div class="container mt-5">
        <h1 class="mb-4">Manage Preferences</h1>

        <div id="feedbackMessage" class="mb-4"></div>

        <div class="row">
            <div class="col-md-6">
                <h3>Your Preferences</h3>
                <div id="userPreferences">
                    @if (!userPreferences.Any())

                    {
                        <p class="alert alert-warning">You don't have any preferences yet.</p>
                    }

                    else

                    {
                        <ul class="list-group">
                            @foreach (var preference in userPreferences)

                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center" id="user-preference-@preference.ID">
                                    @preference.Content
                                    <button type="button" class="btn btn-sm btn-danger" onclick="removePreference('@preference.ID', true)">Remove</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <div class="col-md-6">
                <h3>All Preferences</h3>
                <div id="allPreferences">
                    @if (!allPreferences.Any())

                    {
                        <p class="alert alert-warning">No preferences available.</p>
                    }

                    else

                    {
                        <ul class="list-group">
                            @foreach (var preference in allPreferences)

                            {

                                var isAdded = userPreferences.Any(up => up.ID == preference.ID);

                                <li class="list-group-item d-flex justify-content-between align-items-center" id="all-preference-@preference.ID">
                                    @preference.Content
                                    <button type="button" class="btn btn-sm @(isAdded ? "btn-secondary" : "btn-primary")" @(isAdded ? "disabled" : "") onclick="addPreference('@preference.ID')">
                                        @(isAdded ? "Added" : "Add")
                                    </button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</form>

<div class="text-center mt-4">
    <a href="Settings" class="btn btn-secondary">Return to Account Page</a>
</div>

@section Scripts {
    <script>
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        let feedbackTimeout;

        function displayFeedback(message, type) {
            const feedbackDiv = document.getElementById('feedbackMessage');
            feedbackDiv.innerHTML = `<div class="alert alert-${type}" role="alert">${message}</div>`;
            if (feedbackTimeout) {
                clearTimeout(feedbackTimeout);
            }
            feedbackTimeout = setTimeout(() => {
                feedbackDiv.innerHTML = '';
            }, 5000);
        }

        function updateEmptyState(listContainer, message) {
            const listGroup = listContainer.querySelector('.list-group');
            if (!listGroup || listGroup.children.length === 0) {
                if (!listContainer.querySelector('.empty-state')) {
                    const emptyMessage = document.createElement('p');
                    emptyMessage.className = 'alert alert-warning empty-state';
                    emptyMessage.textContent = message;
                    listContainer.appendChild(emptyMessage);
                }
            } else {
                const emptyMessage = listContainer.querySelector('.empty-state');
                if (emptyMessage) {
                    emptyMessage.remove();
                }
            }
        }

        function addPreference(preferenceId) {
            const addButton = document.querySelector(`#all-preference-${preferenceId} button`);
            const preferenceElement = document.querySelector(`#all-preference-${preferenceId}`);
            const preferenceContent = preferenceElement?.textContent.trim().replace('Add', '').trim();
            if (!preferenceContent) {
                displayFeedback('An error occurred while adding the preference.', 'danger');
                return;
            }
            addButton.disabled = true;
            addButton.textContent = 'Added';
            fetch('/Account/AddPreference', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ preferenceId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const userPreferencesContainer = document.getElementById('userPreferences');
                        if (!userPreferencesContainer.querySelector('.list-group')) {
                            userPreferencesContainer.innerHTML = '<ul class="list-group"></ul>';
                        }
                        if (!document.querySelector(`#user-preference-${preferenceId}`)) {
                            const newPreference = document.createElement('li');
                            newPreference.id = `user-preference-${preferenceId}`;
                            newPreference.className = 'list-group-item d-flex justify-content-between align-items-center';
                            newPreference.innerHTML = `
                                    ${preferenceContent}
                                    <button type="button" class="btn btn-sm btn-danger" onclick="removePreference('${preferenceId}', true)">Remove</button>
                                `;
                            userPreferencesContainer.querySelector('.list-group').appendChild(newPreference);
                        }
                        updateEmptyState(document.getElementById('userPreferences'), "You don't have any preferences yet.");
                        displayFeedback(data.message, 'success');
                    } else {
                        addButton.disabled = false;
                        addButton.textContent = 'Add';
                        displayFeedback(data.message, 'danger');
                    }
                })
                .catch(() => {
                    addButton.disabled = false;
                    addButton.textContent = 'Add';
                    displayFeedback('An error occurred. Please try again later.', 'danger');
                });
        }

        function removePreference(preferenceId, isUserPreference) {
            const preferenceElement = document.querySelector(`#user-preference-${preferenceId}`);
            const preferenceContent = preferenceElement?.textContent.trim().replace('Remove', '').trim();
            if (!preferenceContent) {
                displayFeedback('An error occurred while removing the preference.', 'danger');
                return;
            }
            fetch('/Account/RemovePreference', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ preferenceId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        preferenceElement.remove();
                        const allPreferenceButton = document.querySelector(`#all-preference-${preferenceId} button`);
                        if (allPreferenceButton) {
                            allPreferenceButton.disabled = false;
                            allPreferenceButton.textContent = 'Add';
                            allPreferenceButton.classList.remove('btn-secondary');
                            allPreferenceButton.classList.add('btn-primary');
                        }
                        updateEmptyState(document.getElementById('userPreferences'), "You don't have any preferences yet.");
                        displayFeedback(data.message, 'success');
                    } else {
                        displayFeedback(data.message, 'danger');
                    }
                })
                .catch(() => {
                    displayFeedback('An error occurred. Please try again later.', 'danger');
                });
        }
    </script>
}
